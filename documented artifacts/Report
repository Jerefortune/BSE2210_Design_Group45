# USEP Project: Introductory Design Vision
## Research Dossier - Part A

**Course:** BSE 2210 – Software Design  
**Assignment:** 1 - Foundations of Modern Software Design  
**Date:** September 16, 2025  
**Team:** Group XX  
**Authors:** [Member A Name], [Member B Name], [Member C Name]

---

### 1. Software Design in 2025: Process and Artifact

#### 1.1 Design as a Process
In the contemporary software landscape of 2025, design is understood not as a preliminary phase but as a **continuous, iterative, and holistic process** integrated throughout the entire product lifecycle. This process is inherently collaborative, involving constant dialogue between designers, developers, operations teams (DevOps), business stakeholders, and end-users. It is a decision-making framework that balances functional requirements with non-functional constraints like scalability, security, and ethics.

For the Unified Student Experience Platform (USEP), this means the design process will be Agile and user-centric. It will begin with high-level architectural decisions and evolve through successive sprints, incorporating feedback from pilot groups of international students and university administration. This approach ensures the final product is not only technically sound but also genuinely meets the diverse needs of its users, fulfilling the mandate for a sustainable and lasting design.

#### 1.2 Design as an Artifact
The tangible outputs of the design process are the **artifacts**. These documents and models serve as the critical blueprint for development, the single source of truth for architecture, and the foundational knowledge base for all future maintenance and scaling efforts. For a strategic university-wide platform like USEP, which must "last beyond 2025," these artifacts are indispensable for ensuring long-term viability and understandability.

**Relevant Artifacts for USEP:**

1.  **System Context Diagram:** This high-level artifact is essential for defining the system's boundaries and identifying all external entities and systems USEP must interact with. It is the first step in managing the complexity of integration with existing LMS and HR systems, a core project goal.
2.  **Architecture Decision Records (ADRs):** These documents capture the context, rationale, and consequences of key architectural decisions. For USEP, which will evolve over many years, ADRs provide crucial institutional memory, explaining *why* certain choices (e.g., technology selection, architectural patterns) were made, preventing future teams from repeating mistakes or undermining the system's foundations.

---

### 2. Modern Design Trends and Application to USEP

The technological landscape is defined by trends that promote scalability, efficiency, and intelligence. Three are particularly pertinent to the USEP project.

#### 2.1 Microservices Architecture
This architectural style structures an application as a collection of loosely coupled, fine-grained services communicating through lightweight protocols like HTTP/REST or messaging queues.

*   **Application to USEP:** The platform's core domains—Academic, Support, and Community—are naturally distinct. A microservices architecture allows us to develop and deploy these domains independently. For instance, the "AI Advising Service" can be built and scaled by a specialized team using Python, while the "Course Registration Service" is developed in Java by another team. This directly supports the university's requirement for a **scalable** and adaptable system that can grow and evolve over its long lifespan. It also mitigates risk, as a failure in one service (e.g., the forums) does not crash the entire platform.

#### 2.2 AI-Augmented Development & Operations (AIDevOps)
The integration of Artificial Intelligence into the software development lifecycle (SDLC) and operational processes is now standard practice. This includes AI-powered code completion, automated testing, log analysis, and predictive monitoring.

*   **Application to USEP:** This trend is a key tool for addressing the project's **limited budget**. AI-assisted coding tools (e.g., GitHub Copilot) can significantly boost developer productivity, allowing a smaller in-house team to manage a larger codebase. Furthermore, AI-driven operational monitoring can predict system failures or performance degradation before they impact students, enhancing reliability and reducing downtime. This contributes to a sustainable operational model.

#### 2.3 Serverless Computing (Function-as-a-Service - FaaS)
Serverless computing allows developers to build and run applications without managing server infrastructure. The cloud provider dynamically manages the allocation of machine resources.

*   **Application to USEP:** This model is ideal for specific, event-driven functions within the platform. For example, the "Loan Repayment Alert" function or the "Event Registration Confirmation" email service may only need to run intermittently. A serverless approach for these components **optimizes cost**—we only pay for the milliseconds of compute time used—directly addressing the budget constraint. It also reduces operational overhead, allowing the team to focus on core application logic rather than infrastructure management.

---

### 3. Business Case: Justifying the USEP Investment

*   **Problem Statement:** The current student experience is fragmented across a myriad of disconnected systems: a separate Learning Management System (LMS), a financial aid portal, a static timetable website, and various club and society pages. This fragmentation leads to significant student frustration, difficulty in navigating university life, administrative inefficiency due to data silos, and an inability to form a holistic view of student engagement and well-being.
*   **Proposed Solution:** The Unified Student Experience Platform (USEP) will serve as a single, integrated, and personalized digital portal. It will seamlessly combine academic, administrative, support, and community functionalities into a cohesive and intuitive user experience.
*   **Expected Value and Return on Investment:**
    *   **Improved Student Retention and Success:** A streamlined and supportive digital experience reduces administrative burden and stress on students, allowing them to focus on their studies. Early intervention tools powered by unified data can help identify and support at-risk students.
    *   **Enhanced Operational Efficiency:** USEP will automate manual processes and break down data silos between departments (Registrar, Finance, Student Affairs). This reduces redundant work, improves data accuracy, and frees up staff time for higher-value, student-facing activities.
    *   **Data-Driven Decision Making:** A centralized platform provides a comprehensive dataset on student behavior and engagement. This analytics capability enables university leadership to make informed strategic decisions about resource allocation, program offerings, and student support services.

---

### 4. Outsourcing Analysis and Recommendation

To augment the internal team and address budget constraints, outsourcing is a viable strategy. The three primary models are:

*   **Onshore:** Contracting with a provider within the same country. This offers the easiest communication, cultural alignment, and legal compliance but at the highest cost.
*   **Offshore:** Contracting with a provider in a geographically distant, low-cost country. This offers the lowest cost but introduces significant challenges in communication, time zone differences, and cultural misalignment, which can lead to project risk.
*   **Nearshore:** Contracting with a provider in a nearby country with overlapping time zones and cultural similarities. This offers a balance of cost savings and manageable collaboration.

**Recommendation for USEP:**
We recommend a **Hybrid Sourcing Model with a Nearshore Bias**. Given the strategic importance, complex integrations, and need for close collaboration on core architecture and security, the **core design and architecture work should be kept onshore or nearshore**. This ensures clear communication of the vision and tight alignment with university values (e.g., ethics, inclusivity).

However, **specific, well-defined development tasks** (e.g., implementing UI components, writing unit tests for isolated services) could be assigned to an offshore partner to capitalize on cost savings, provided they operate under strict guidelines and a robust integration process managed by the onshore team.

This balanced approach mitigates the risks of pure offshoring while still achieving significant cost optimization, making it the most prudent choice for the USEP project.

---

### 5. Cultural Intelligence in Design

A platform for a diverse, international student body must be built on a foundation of inclusivity. This requires concrete, implementable requirements.

1.  **Comprehensive Accessibility Compliance (WCAG 2.1 AA):** Accessibility must be a core design principle, not a feature. This includes:
    *   **Full screen reader support** for visually impaired students.
    *   **Keyboard navigation** for all functionalities, supporting those with motor disabilities.
    *   **High-contrast mode** and resizable text options.
    *   **Captions and transcripts** for all audio and video content.
    *   **Use of ARIA landmarks** and semantic HTML to ensure a meaningful experience for assistive technologies.

2.  **Multilingual and Localized User Experience:** The UI must extend beyond simple text translation.
    *   **Support for Right-to-Left (RTL) Languages:** Full layout mirroring for languages like Arabic and Hebrew.
    *   **Cultural Localization:** Date, time, number, and address formats must adapt to the user's locale. Imagery and icons must be culturally appropriate and neutral.
    *   **Dynamic Language Selection:** The user should be able to set their language preference easily, which is then remembered across all services and devices.

---

### 6. DevOps and DevSecOps Integration

A modern CI/CD (Continuous Integration and Continuous Deployment) pipeline is the engine that enables the "design that lasts" by ensuring quality, security, and rapid, reliable evolution.

**USEP CI/CD Pipeline Overview:**

```mermaid
graph LR
A[Developer<br>Git Commit] --> B[Version Control<br>GitHub]
B --> C[CI Server: Build & Unit Tests]
C --> D[Security Scan<br>SAST & SCA]
D --> E[Deploy to Staging]
E --> F[Automated Integration &<br>UI Tests]
F --> G{Manual Approval}
G -- Yes --> H[Deploy to Production]
H --> I[Continuous Monitoring<br>& Feedback]
